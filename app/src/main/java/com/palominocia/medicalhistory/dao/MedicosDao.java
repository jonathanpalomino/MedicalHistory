package com.palominocia.medicalhistory.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MEDICOS".
*/
public class MedicosDao extends AbstractDao<Medicos, Long> {

    public static final String TABLENAME = "MEDICOS";

    /**
     * Properties of entity Medicos.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CodigoMedico = new Property(1, Long.class, "codigoMedico", false, "CODIGO_MEDICO");
        public final static Property NombreMedico = new Property(2, String.class, "nombreMedico", false, "NOMBRE_MEDICO");
        public final static Property UrlMedico = new Property(3, String.class, "urlMedico", false, "URL_MEDICO");
    }

    private DaoSession daoSession;


    public MedicosDao(DaoConfig config) {
        super(config);
    }
    
    public MedicosDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MEDICOS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CODIGO_MEDICO\" INTEGER," + // 1: codigoMedico
                "\"NOMBRE_MEDICO\" TEXT," + // 2: nombreMedico
                "\"URL_MEDICO\" TEXT);"); // 3: urlMedico
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MEDICOS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Medicos entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long codigoMedico = entity.getCodigoMedico();
        if (codigoMedico != null) {
            stmt.bindLong(2, codigoMedico);
        }
 
        String nombreMedico = entity.getNombreMedico();
        if (nombreMedico != null) {
            stmt.bindString(3, nombreMedico);
        }
 
        String urlMedico = entity.getUrlMedico();
        if (urlMedico != null) {
            stmt.bindString(4, urlMedico);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Medicos entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long codigoMedico = entity.getCodigoMedico();
        if (codigoMedico != null) {
            stmt.bindLong(2, codigoMedico);
        }
 
        String nombreMedico = entity.getNombreMedico();
        if (nombreMedico != null) {
            stmt.bindString(3, nombreMedico);
        }
 
        String urlMedico = entity.getUrlMedico();
        if (urlMedico != null) {
            stmt.bindString(4, urlMedico);
        }
    }

    @Override
    protected final void attachEntity(Medicos entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Medicos readEntity(Cursor cursor, int offset) {
        Medicos entity = new Medicos( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // codigoMedico
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nombreMedico
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // urlMedico
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Medicos entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCodigoMedico(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setNombreMedico(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUrlMedico(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Medicos entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Medicos entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Medicos entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
