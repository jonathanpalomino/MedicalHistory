package com.palominocia.medicalhistory.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECETA".
*/
public class RecetaDao extends AbstractDao<Receta, Long> {

    public static final String TABLENAME = "RECETA";

    /**
     * Properties of entity Receta.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CodigoReceta = new Property(0, long.class, "codigoReceta", true, "CODIGO_RECETA");
        public final static Property FechaReceta = new Property(1, java.util.Date.class, "fechaReceta", false, "FECHA_RECETA");
    }


    public RecetaDao(DaoConfig config) {
        super(config);
    }
    
    public RecetaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECETA\" (" + //
                "\"CODIGO_RECETA\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: codigoReceta
                "\"FECHA_RECETA\" INTEGER);"); // 1: fechaReceta
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECETA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Receta entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCodigoReceta());
 
        java.util.Date fechaReceta = entity.getFechaReceta();
        if (fechaReceta != null) {
            stmt.bindLong(2, fechaReceta.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Receta entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCodigoReceta());
 
        java.util.Date fechaReceta = entity.getFechaReceta();
        if (fechaReceta != null) {
            stmt.bindLong(2, fechaReceta.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Receta readEntity(Cursor cursor, int offset) {
        Receta entity = new Receta( //
            cursor.getLong(offset + 0), // codigoReceta
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)) // fechaReceta
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Receta entity, int offset) {
        entity.setCodigoReceta(cursor.getLong(offset + 0));
        entity.setFechaReceta(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Receta entity, long rowId) {
        entity.setCodigoReceta(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Receta entity) {
        if(entity != null) {
            return entity.getCodigoReceta();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Receta entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
