package com.palominocia.medicalhistory.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PACIENTE".
*/
public class PacienteDao extends AbstractDao<Paciente, Long> {

    public static final String TABLENAME = "PACIENTE";

    /**
     * Properties of entity Paciente.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CodigoPaciente = new Property(0, long.class, "codigoPaciente", true, "CODIGO_PACIENTE");
        public final static Property NombrePaciente = new Property(1, String.class, "nombrePaciente", false, "NOMBRE_PACIENTE");
        public final static Property FecNacimientoPaciente = new Property(2, java.util.Date.class, "fecNacimientoPaciente", false, "FEC_NACIMIENTO_PACIENTE");
    }


    public PacienteDao(DaoConfig config) {
        super(config);
    }
    
    public PacienteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PACIENTE\" (" + //
                "\"CODIGO_PACIENTE\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: codigoPaciente
                "\"NOMBRE_PACIENTE\" TEXT," + // 1: nombrePaciente
                "\"FEC_NACIMIENTO_PACIENTE\" INTEGER);"); // 2: fecNacimientoPaciente
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PACIENTE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Paciente entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCodigoPaciente());
 
        String nombrePaciente = entity.getNombrePaciente();
        if (nombrePaciente != null) {
            stmt.bindString(2, nombrePaciente);
        }
 
        java.util.Date fecNacimientoPaciente = entity.getFecNacimientoPaciente();
        if (fecNacimientoPaciente != null) {
            stmt.bindLong(3, fecNacimientoPaciente.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Paciente entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCodigoPaciente());
 
        String nombrePaciente = entity.getNombrePaciente();
        if (nombrePaciente != null) {
            stmt.bindString(2, nombrePaciente);
        }
 
        java.util.Date fecNacimientoPaciente = entity.getFecNacimientoPaciente();
        if (fecNacimientoPaciente != null) {
            stmt.bindLong(3, fecNacimientoPaciente.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Paciente readEntity(Cursor cursor, int offset) {
        Paciente entity = new Paciente( //
            cursor.getLong(offset + 0), // codigoPaciente
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nombrePaciente
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)) // fecNacimientoPaciente
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Paciente entity, int offset) {
        entity.setCodigoPaciente(cursor.getLong(offset + 0));
        entity.setNombrePaciente(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFecNacimientoPaciente(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Paciente entity, long rowId) {
        entity.setCodigoPaciente(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Paciente entity) {
        if(entity != null) {
            return entity.getCodigoPaciente();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Paciente entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
