package com.palominocia.medicalhistory.dao;

import org.greenrobot.greendao.annotation.*;

import java.util.List;
import com.palominocia.medicalhistory.dao.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "CLINICAS".
 */
@Entity(active = true)
public class Clinicas {

    @Id(autoincrement = true)
    private Long codigoClinica;
    private String NombreClinica;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient ClinicasDao myDao;

    @ToMany(joinProperties = {
        @JoinProperty(name = "codigoClinica", referencedName = "codigoClinica")
    })
    private List<Sedes> sedesList;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public Clinicas() {
    }

    public Clinicas(Long codigoClinica) {
        this.codigoClinica = codigoClinica;
    }

    @Generated
    public Clinicas(Long codigoClinica, String NombreClinica) {
        this.codigoClinica = codigoClinica;
        this.NombreClinica = NombreClinica;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getClinicasDao() : null;
    }

    public Long getCodigoClinica() {
        return codigoClinica;
    }

    public void setCodigoClinica(Long codigoClinica) {
        this.codigoClinica = codigoClinica;
    }

    public String getNombreClinica() {
        return NombreClinica;
    }

    public void setNombreClinica(String NombreClinica) {
        this.NombreClinica = NombreClinica;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<Sedes> getSedesList() {
        if (sedesList == null) {
            __throwIfDetached();
            SedesDao targetDao = daoSession.getSedesDao();
            List<Sedes> sedesListNew = targetDao._queryClinicas_SedesList(codigoClinica);
            synchronized (this) {
                if(sedesList == null) {
                    sedesList = sedesListNew;
                }
            }
        }
        return sedesList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetSedesList() {
        sedesList = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
