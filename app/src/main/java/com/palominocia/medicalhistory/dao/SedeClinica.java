package com.palominocia.medicalhistory.dao;

import org.greenrobot.greendao.annotation.*;

import com.palominocia.medicalhistory.dao.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "SEDE_CLINICA".
 */
@Entity(active = true)
public class SedeClinica {
    private Long codigoSede;
    private Long codigoClinica;
    private Long codigoMedico;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient SedeClinicaDao myDao;

    @ToOne(joinProperty = "codigoClinica")
    private Sedes sedes;

    @Generated
    private transient Long sedes__resolvedKey;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public SedeClinica() {
    }

    @Generated
    public SedeClinica(Long codigoSede, Long codigoClinica, Long codigoMedico) {
        this.codigoSede = codigoSede;
        this.codigoClinica = codigoClinica;
        this.codigoMedico = codigoMedico;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSedeClinicaDao() : null;
    }

    public Long getCodigoSede() {
        return codigoSede;
    }

    public void setCodigoSede(Long codigoSede) {
        this.codigoSede = codigoSede;
    }

    public Long getCodigoClinica() {
        return codigoClinica;
    }

    public void setCodigoClinica(Long codigoClinica) {
        this.codigoClinica = codigoClinica;
    }

    public Long getCodigoMedico() {
        return codigoMedico;
    }

    public void setCodigoMedico(Long codigoMedico) {
        this.codigoMedico = codigoMedico;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Sedes getSedes() {
        Long __key = this.codigoClinica;
        if (sedes__resolvedKey == null || !sedes__resolvedKey.equals(__key)) {
            __throwIfDetached();
            SedesDao targetDao = daoSession.getSedesDao();
            Sedes sedesNew = targetDao.load(__key);
            synchronized (this) {
                sedes = sedesNew;
            	sedes__resolvedKey = __key;
            }
        }
        return sedes;
    }

    @Generated
    public void setSedes(Sedes sedes) {
        synchronized (this) {
            this.sedes = sedes;
            codigoClinica = sedes == null ? null : sedes.getId();
            sedes__resolvedKey = codigoClinica;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
