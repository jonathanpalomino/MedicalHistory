package com.palominocia.medicalhistory.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CITAS".
*/
public class CitasDao extends AbstractDao<Citas, Void> {

    public static final String TABLENAME = "CITAS";

    /**
     * Properties of entity Citas.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CodigoCita = new Property(0, Long.class, "codigoCita", false, "CODIGO_CITA");
        public final static Property FechaCita = new Property(1, java.util.Date.class, "fechaCita", false, "FECHA_CITA");
    }


    public CitasDao(DaoConfig config) {
        super(config);
    }
    
    public CitasDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CITAS\" (" + //
                "\"CODIGO_CITA\" INTEGER," + // 0: codigoCita
                "\"FECHA_CITA\" INTEGER);"); // 1: fechaCita
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CITAS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Citas entity) {
        stmt.clearBindings();
 
        Long codigoCita = entity.getCodigoCita();
        if (codigoCita != null) {
            stmt.bindLong(1, codigoCita);
        }
 
        java.util.Date fechaCita = entity.getFechaCita();
        if (fechaCita != null) {
            stmt.bindLong(2, fechaCita.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Citas entity) {
        stmt.clearBindings();
 
        Long codigoCita = entity.getCodigoCita();
        if (codigoCita != null) {
            stmt.bindLong(1, codigoCita);
        }
 
        java.util.Date fechaCita = entity.getFechaCita();
        if (fechaCita != null) {
            stmt.bindLong(2, fechaCita.getTime());
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Citas readEntity(Cursor cursor, int offset) {
        Citas entity = new Citas( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // codigoCita
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)) // fechaCita
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Citas entity, int offset) {
        entity.setCodigoCita(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFechaCita(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Citas entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Citas entity) {
        return null;
    }

    @Override
    public boolean hasKey(Citas entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
