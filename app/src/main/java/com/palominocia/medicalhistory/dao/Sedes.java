package com.palominocia.medicalhistory.dao;

import org.greenrobot.greendao.annotation.*;

import java.util.List;
import com.palominocia.medicalhistory.dao.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "SEDES".
 */
@Entity(active = true, indexes = {
    @Index(value = "codigoSede ASC, codigoClinica ASC")
})
public class Sedes {

    @Id(autoincrement = true)
    private Long id;
    private Long codigoSede;
    private Long codigoClinica;
    private String NombreSede;
    private String DireccionSede;
    private String TelefonoSede;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient SedesDao myDao;

    @ToOne(joinProperty = "codigoClinica")
    private Clinicas clinicas;

    @Generated
    private transient Long clinicas__resolvedKey;

    @ToMany(joinProperties = {
        @JoinProperty(name = "codigoSede", referencedName = "codigoSede"),
        @JoinProperty(name = "codigoClinica", referencedName = "codigoClinica")
    })
    private List<SedeClinica> sedeClinicaList;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public Sedes() {
    }

    public Sedes(Long id) {
        this.id = id;
    }

    @Generated
    public Sedes(Long id, Long codigoSede, Long codigoClinica, String NombreSede, String DireccionSede, String TelefonoSede) {
        this.id = id;
        this.codigoSede = codigoSede;
        this.codigoClinica = codigoClinica;
        this.NombreSede = NombreSede;
        this.DireccionSede = DireccionSede;
        this.TelefonoSede = TelefonoSede;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSedesDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getCodigoSede() {
        return codigoSede;
    }

    public void setCodigoSede(Long codigoSede) {
        this.codigoSede = codigoSede;
    }

    public Long getCodigoClinica() {
        return codigoClinica;
    }

    public void setCodigoClinica(Long codigoClinica) {
        this.codigoClinica = codigoClinica;
    }

    public String getNombreSede() {
        return NombreSede;
    }

    public void setNombreSede(String NombreSede) {
        this.NombreSede = NombreSede;
    }

    public String getDireccionSede() {
        return DireccionSede;
    }

    public void setDireccionSede(String DireccionSede) {
        this.DireccionSede = DireccionSede;
    }

    public String getTelefonoSede() {
        return TelefonoSede;
    }

    public void setTelefonoSede(String TelefonoSede) {
        this.TelefonoSede = TelefonoSede;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Clinicas getClinicas() {
        Long __key = this.codigoClinica;
        if (clinicas__resolvedKey == null || !clinicas__resolvedKey.equals(__key)) {
            __throwIfDetached();
            ClinicasDao targetDao = daoSession.getClinicasDao();
            Clinicas clinicasNew = targetDao.load(__key);
            synchronized (this) {
                clinicas = clinicasNew;
            	clinicas__resolvedKey = __key;
            }
        }
        return clinicas;
    }

    @Generated
    public void setClinicas(Clinicas clinicas) {
        synchronized (this) {
            this.clinicas = clinicas;
            codigoClinica = clinicas == null ? null : clinicas.getCodigoClinica();
            clinicas__resolvedKey = codigoClinica;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<SedeClinica> getSedeClinicaList() {
        if (sedeClinicaList == null) {
            __throwIfDetached();
            SedeClinicaDao targetDao = daoSession.getSedeClinicaDao();
            List<SedeClinica> sedeClinicaListNew = targetDao._querySedes_SedeClinicaList(codigoSede, codigoClinica);
            synchronized (this) {
                if(sedeClinicaList == null) {
                    sedeClinicaList = sedeClinicaListNew;
                }
            }
        }
        return sedeClinicaList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetSedeClinicaList() {
        sedeClinicaList = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
