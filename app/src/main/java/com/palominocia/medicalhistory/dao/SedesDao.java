package com.palominocia.medicalhistory.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SEDES".
*/
public class SedesDao extends AbstractDao<Sedes, Long> {

    public static final String TABLENAME = "SEDES";

    /**
     * Properties of entity Sedes.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CodigoSede = new Property(0, long.class, "codigoSede", true, "CODIGO_SEDE");
        public final static Property NombreSede = new Property(1, String.class, "NombreSede", false, "NOMBRE_SEDE");
        public final static Property DireccionSede = new Property(2, String.class, "DireccionSede", false, "DIRECCION_SEDE");
        public final static Property TelefonoSede = new Property(3, String.class, "TelefonoSede", false, "TELEFONO_SEDE");
    }


    public SedesDao(DaoConfig config) {
        super(config);
    }
    
    public SedesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SEDES\" (" + //
                "\"CODIGO_SEDE\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: codigoSede
                "\"NOMBRE_SEDE\" TEXT," + // 1: NombreSede
                "\"DIRECCION_SEDE\" TEXT," + // 2: DireccionSede
                "\"TELEFONO_SEDE\" TEXT);"); // 3: TelefonoSede
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SEDES\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Sedes entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCodigoSede());
 
        String NombreSede = entity.getNombreSede();
        if (NombreSede != null) {
            stmt.bindString(2, NombreSede);
        }
 
        String DireccionSede = entity.getDireccionSede();
        if (DireccionSede != null) {
            stmt.bindString(3, DireccionSede);
        }
 
        String TelefonoSede = entity.getTelefonoSede();
        if (TelefonoSede != null) {
            stmt.bindString(4, TelefonoSede);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Sedes entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCodigoSede());
 
        String NombreSede = entity.getNombreSede();
        if (NombreSede != null) {
            stmt.bindString(2, NombreSede);
        }
 
        String DireccionSede = entity.getDireccionSede();
        if (DireccionSede != null) {
            stmt.bindString(3, DireccionSede);
        }
 
        String TelefonoSede = entity.getTelefonoSede();
        if (TelefonoSede != null) {
            stmt.bindString(4, TelefonoSede);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Sedes readEntity(Cursor cursor, int offset) {
        Sedes entity = new Sedes( //
            cursor.getLong(offset + 0), // codigoSede
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // NombreSede
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // DireccionSede
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // TelefonoSede
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Sedes entity, int offset) {
        entity.setCodigoSede(cursor.getLong(offset + 0));
        entity.setNombreSede(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDireccionSede(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTelefonoSede(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Sedes entity, long rowId) {
        entity.setCodigoSede(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Sedes entity) {
        if(entity != null) {
            return entity.getCodigoSede();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Sedes entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
