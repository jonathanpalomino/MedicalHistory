package com.palominocia.medicalhistory.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SEDES".
*/
public class SedesDao extends AbstractDao<Sedes, Long> {

    public static final String TABLENAME = "SEDES";

    /**
     * Properties of entity Sedes.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CodigoSede = new Property(1, Long.class, "codigoSede", false, "CODIGO_SEDE");
        public final static Property CodigoClinica = new Property(2, Long.class, "codigoClinica", false, "CODIGO_CLINICA");
        public final static Property NombreSede = new Property(3, String.class, "NombreSede", false, "NOMBRE_SEDE");
        public final static Property DireccionSede = new Property(4, String.class, "DireccionSede", false, "DIRECCION_SEDE");
        public final static Property TelefonoSede = new Property(5, String.class, "TelefonoSede", false, "TELEFONO_SEDE");
    }

    private DaoSession daoSession;

    private Query<Sedes> clinicas_SedesListQuery;

    public SedesDao(DaoConfig config) {
        super(config);
    }
    
    public SedesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SEDES\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CODIGO_SEDE\" INTEGER," + // 1: codigoSede
                "\"CODIGO_CLINICA\" INTEGER," + // 2: codigoClinica
                "\"NOMBRE_SEDE\" TEXT," + // 3: NombreSede
                "\"DIRECCION_SEDE\" TEXT," + // 4: DireccionSede
                "\"TELEFONO_SEDE\" TEXT);"); // 5: TelefonoSede
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_SEDES_CODIGO_SEDE_CODIGO_CLINICA ON \"SEDES\"" +
                " (\"CODIGO_SEDE\" ASC,\"CODIGO_CLINICA\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SEDES\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Sedes entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long codigoSede = entity.getCodigoSede();
        if (codigoSede != null) {
            stmt.bindLong(2, codigoSede);
        }
 
        Long codigoClinica = entity.getCodigoClinica();
        if (codigoClinica != null) {
            stmt.bindLong(3, codigoClinica);
        }
 
        String NombreSede = entity.getNombreSede();
        if (NombreSede != null) {
            stmt.bindString(4, NombreSede);
        }
 
        String DireccionSede = entity.getDireccionSede();
        if (DireccionSede != null) {
            stmt.bindString(5, DireccionSede);
        }
 
        String TelefonoSede = entity.getTelefonoSede();
        if (TelefonoSede != null) {
            stmt.bindString(6, TelefonoSede);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Sedes entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long codigoSede = entity.getCodigoSede();
        if (codigoSede != null) {
            stmt.bindLong(2, codigoSede);
        }
 
        Long codigoClinica = entity.getCodigoClinica();
        if (codigoClinica != null) {
            stmt.bindLong(3, codigoClinica);
        }
 
        String NombreSede = entity.getNombreSede();
        if (NombreSede != null) {
            stmt.bindString(4, NombreSede);
        }
 
        String DireccionSede = entity.getDireccionSede();
        if (DireccionSede != null) {
            stmt.bindString(5, DireccionSede);
        }
 
        String TelefonoSede = entity.getTelefonoSede();
        if (TelefonoSede != null) {
            stmt.bindString(6, TelefonoSede);
        }
    }

    @Override
    protected final void attachEntity(Sedes entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Sedes readEntity(Cursor cursor, int offset) {
        Sedes entity = new Sedes( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // codigoSede
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // codigoClinica
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // NombreSede
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // DireccionSede
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // TelefonoSede
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Sedes entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCodigoSede(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setCodigoClinica(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setNombreSede(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDireccionSede(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTelefonoSede(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Sedes entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Sedes entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Sedes entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "sedesList" to-many relationship of Clinicas. */
    public List<Sedes> _queryClinicas_SedesList(Long codigoClinica) {
        synchronized (this) {
            if (clinicas_SedesListQuery == null) {
                QueryBuilder<Sedes> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CodigoClinica.eq(null));
                clinicas_SedesListQuery = queryBuilder.build();
            }
        }
        Query<Sedes> query = clinicas_SedesListQuery.forCurrentThread();
        query.setParameter(0, codigoClinica);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getClinicasDao().getAllColumns());
            builder.append(" FROM SEDES T");
            builder.append(" LEFT JOIN CLINICAS T0 ON T.\"CODIGO_CLINICA\"=T0.\"CODIGO_CLINICA\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Sedes loadCurrentDeep(Cursor cursor, boolean lock) {
        Sedes entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Clinicas clinicas = loadCurrentOther(daoSession.getClinicasDao(), cursor, offset);
        entity.setClinicas(clinicas);

        return entity;    
    }

    public Sedes loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Sedes> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Sedes> list = new ArrayList<Sedes>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Sedes> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Sedes> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
