package com.palominocia.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MEDICO_ESPECIALIDAD".
*/
public class MedicoEspecialidadDao extends AbstractDao<MedicoEspecialidad, Void> {

    public static final String TABLENAME = "MEDICO_ESPECIALIDAD";

    /**
     * Properties of entity MedicoEspecialidad.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property McaEspecialidadActiva = new Property(0, String.class, "mcaEspecialidadActiva", false, "MCA_ESPECIALIDAD_ACTIVA");
        public final static Property CodigoMedico = new Property(1, long.class, "codigoMedico", true, "CODIGO_MEDICO");
        public final static Property CodigoEspecialidad = new Property(2, long.class, "codigoEspecialidad", true, "CODIGO_ESPECIALIDAD");
    }

    private Query<MedicoEspecialidad> especialidad_MedicoEspecialidadListQuery;
    private Query<MedicoEspecialidad> medicos_MedicoEspecialidadListQuery;

    public MedicoEspecialidadDao(DaoConfig config) {
        super(config);
    }
    
    public MedicoEspecialidadDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MEDICO_ESPECIALIDAD\" (" + //
                "\"MCA_ESPECIALIDAD_ACTIVA\" TEXT," + // 0: mcaEspecialidadActiva
                "\"CODIGO_MEDICO\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 1: codigoMedico
                "\"CODIGO_ESPECIALIDAD\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL );"); // 2: codigoEspecialidad
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MEDICO_ESPECIALIDAD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MedicoEspecialidad entity) {
        stmt.clearBindings();
 
        String mcaEspecialidadActiva = entity.getMcaEspecialidadActiva();
        if (mcaEspecialidadActiva != null) {
            stmt.bindString(1, mcaEspecialidadActiva);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MedicoEspecialidad entity) {
        stmt.clearBindings();
 
        String mcaEspecialidadActiva = entity.getMcaEspecialidadActiva();
        if (mcaEspecialidadActiva != null) {
            stmt.bindString(1, mcaEspecialidadActiva);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public MedicoEspecialidad readEntity(Cursor cursor, int offset) {
        MedicoEspecialidad entity = new MedicoEspecialidad( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0) // mcaEspecialidadActiva
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MedicoEspecialidad entity, int offset) {
        entity.setMcaEspecialidadActiva(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(MedicoEspecialidad entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(MedicoEspecialidad entity) {
        return null;
    }

    @Override
    public boolean hasKey(MedicoEspecialidad entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "medicoEspecialidadList" to-many relationship of Especialidad. */
    public List<MedicoEspecialidad> _queryEspecialidad_MedicoEspecialidadList(long codigoEspecialidad) {
        synchronized (this) {
            if (especialidad_MedicoEspecialidadListQuery == null) {
                QueryBuilder<MedicoEspecialidad> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CodigoEspecialidad.eq(null));
                especialidad_MedicoEspecialidadListQuery = queryBuilder.build();
            }
        }
        Query<MedicoEspecialidad> query = especialidad_MedicoEspecialidadListQuery.forCurrentThread();
        query.setParameter(0, codigoEspecialidad);
        return query.list();
    }

    /** Internal query to resolve the "medicoEspecialidadList" to-many relationship of Medicos. */
    public List<MedicoEspecialidad> _queryMedicos_MedicoEspecialidadList(long codigoMedico) {
        synchronized (this) {
            if (medicos_MedicoEspecialidadListQuery == null) {
                QueryBuilder<MedicoEspecialidad> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CodigoMedico.eq(null));
                medicos_MedicoEspecialidadListQuery = queryBuilder.build();
            }
        }
        Query<MedicoEspecialidad> query = medicos_MedicoEspecialidadListQuery.forCurrentThread();
        query.setParameter(0, codigoMedico);
        return query.list();
    }

}
