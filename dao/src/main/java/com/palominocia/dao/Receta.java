package com.palominocia.dao;

import org.greenrobot.greendao.annotation.*;

import java.util.List;
import com.palominocia.dao.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table "RECETA".
 */
@Entity(active = true)
public class Receta {

    @Id(autoincrement = true)
    private long codigoReceta;
    private java.util.Date fechaReceta;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient RecetaDao myDao;

    @ToMany(joinProperties = {
        @JoinProperty(name = "codigoReceta", referencedName = "codigoMedicina")
    })
    private List<RecetaMedicina> recetaMedicinaList;

    @Generated
    public Receta() {
    }

    public Receta(long codigoReceta) {
        this.codigoReceta = codigoReceta;
    }

    @Generated
    public Receta(long codigoReceta, java.util.Date fechaReceta) {
        this.codigoReceta = codigoReceta;
        this.fechaReceta = fechaReceta;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getRecetaDao() : null;
    }

    public long getCodigoReceta() {
        return codigoReceta;
    }

    public void setCodigoReceta(long codigoReceta) {
        this.codigoReceta = codigoReceta;
    }

    public java.util.Date getFechaReceta() {
        return fechaReceta;
    }

    public void setFechaReceta(java.util.Date fechaReceta) {
        this.fechaReceta = fechaReceta;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<RecetaMedicina> getRecetaMedicinaList() {
        if (recetaMedicinaList == null) {
            __throwIfDetached();
            RecetaMedicinaDao targetDao = daoSession.getRecetaMedicinaDao();
            List<RecetaMedicina> recetaMedicinaListNew = targetDao._queryReceta_RecetaMedicinaList(codigoReceta);
            synchronized (this) {
                if(recetaMedicinaList == null) {
                    recetaMedicinaList = recetaMedicinaListNew;
                }
            }
        }
        return recetaMedicinaList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetRecetaMedicinaList() {
        recetaMedicinaList = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

}
