package com.palominocia.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CLINICAS".
*/
public class ClinicasDao extends AbstractDao<Clinicas, Integer> {

    public static final String TABLENAME = "CLINICAS";

    /**
     * Properties of entity Clinicas.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CodigoClinica = new Property(0, Integer.class, "codigoClinica", true, "CODIGO_CLINICA");
        public final static Property NombreClinica = new Property(1, String.class, "NombreClinica", false, "NOMBRE_CLINICA");
    }


    public ClinicasDao(DaoConfig config) {
        super(config);
    }
    
    public ClinicasDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CLINICAS\" (" + //
                "\"CODIGO_CLINICA\" INTEGER PRIMARY KEY ," + // 0: codigoClinica
                "\"NOMBRE_CLINICA\" TEXT);"); // 1: NombreClinica
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CLINICAS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Clinicas entity) {
        stmt.clearBindings();
 
        Integer codigoClinica = entity.getCodigoClinica();
        if (codigoClinica != null) {
            stmt.bindLong(1, codigoClinica);
        }
 
        String NombreClinica = entity.getNombreClinica();
        if (NombreClinica != null) {
            stmt.bindString(2, NombreClinica);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Clinicas entity) {
        stmt.clearBindings();
 
        Integer codigoClinica = entity.getCodigoClinica();
        if (codigoClinica != null) {
            stmt.bindLong(1, codigoClinica);
        }
 
        String NombreClinica = entity.getNombreClinica();
        if (NombreClinica != null) {
            stmt.bindString(2, NombreClinica);
        }
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0);
    }    

    @Override
    public Clinicas readEntity(Cursor cursor, int offset) {
        Clinicas entity = new Clinicas( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // codigoClinica
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // NombreClinica
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Clinicas entity, int offset) {
        entity.setCodigoClinica(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setNombreClinica(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(Clinicas entity, long rowId) {
        return entity.getCodigoClinica();
    }
    
    @Override
    public Integer getKey(Clinicas entity) {
        if(entity != null) {
            return entity.getCodigoClinica();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Clinicas entity) {
        return entity.getCodigoClinica() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
