package com.palominocia.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SEDE_CLINICA".
*/
public class sedeClinicaDao extends AbstractDao<sedeClinica, Void> {

    public static final String TABLENAME = "SEDE_CLINICA";

    /**
     * Properties of entity sedeClinica.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CodigoSede = new Property(0, long.class, "codigoSede", true, "CODIGO_SEDE");
        public final static Property CodigoMedico = new Property(1, long.class, "codigoMedico", true, "CODIGO_MEDICO");
    }

    private Query<sedeClinica> sedes_SedeClinicaListQuery;
    private Query<sedeClinica> medicos_SedeClinicaListQuery;

    public sedeClinicaDao(DaoConfig config) {
        super(config);
    }
    
    public sedeClinicaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SEDE_CLINICA\" (" + //
                "\"CODIGO_SEDE\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: codigoSede
                "\"CODIGO_MEDICO\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL );"); // 1: codigoMedico
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SEDE_CLINICA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, sedeClinica entity) {
        stmt.clearBindings();
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, sedeClinica entity) {
        stmt.clearBindings();
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public sedeClinica readEntity(Cursor cursor, int offset) {
        sedeClinica entity = new sedeClinica( //
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, sedeClinica entity, int offset) {
     }
    
    @Override
    protected final Void updateKeyAfterInsert(sedeClinica entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(sedeClinica entity) {
        return null;
    }

    @Override
    public boolean hasKey(sedeClinica entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "sedeClinicaList" to-many relationship of Sedes. */
    public List<sedeClinica> _querySedes_SedeClinicaList(long codigoSede) {
        synchronized (this) {
            if (sedes_SedeClinicaListQuery == null) {
                QueryBuilder<sedeClinica> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CodigoSede.eq(null));
                sedes_SedeClinicaListQuery = queryBuilder.build();
            }
        }
        Query<sedeClinica> query = sedes_SedeClinicaListQuery.forCurrentThread();
        query.setParameter(0, codigoSede);
        return query.list();
    }

    /** Internal query to resolve the "sedeClinicaList" to-many relationship of Medicos. */
    public List<sedeClinica> _queryMedicos_SedeClinicaList(long codigoMedico) {
        synchronized (this) {
            if (medicos_SedeClinicaListQuery == null) {
                QueryBuilder<sedeClinica> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CodigoMedico.eq(null));
                medicos_SedeClinicaListQuery = queryBuilder.build();
            }
        }
        Query<sedeClinica> query = medicos_SedeClinicaListQuery.forCurrentThread();
        query.setParameter(0, codigoMedico);
        return query.list();
    }

}
